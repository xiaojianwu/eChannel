// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CMD_MGC_H_
#define FLATBUFFERS_GENERATED_CMD_MGC_H_

#include "flatbuffers/flatbuffers.h"

namespace MGC {

struct InviteReq;

struct InviteResp;

struct InviteReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FROM = 4,
    VT_TO = 6,
    VT_MEDIA = 8,
    VT_MEDIAINFO = 10,
    VT_SUUID = 12
  };
  const flatbuffers::String *from() const { return GetPointer<const flatbuffers::String *>(VT_FROM); }
  const flatbuffers::String *to() const { return GetPointer<const flatbuffers::String *>(VT_TO); }
  int16_t media() const { return GetField<int16_t>(VT_MEDIA, 0); }
  const flatbuffers::String *mediainfo() const { return GetPointer<const flatbuffers::String *>(VT_MEDIAINFO); }
  const flatbuffers::String *suuid() const { return GetPointer<const flatbuffers::String *>(VT_SUUID); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FROM) &&
           verifier.Verify(from()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TO) &&
           verifier.Verify(to()) &&
           VerifyField<int16_t>(verifier, VT_MEDIA) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MEDIAINFO) &&
           verifier.Verify(mediainfo()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SUUID) &&
           verifier.Verify(suuid()) &&
           verifier.EndTable();
  }
};

struct InviteReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_from(flatbuffers::Offset<flatbuffers::String> from) { fbb_.AddOffset(InviteReq::VT_FROM, from); }
  void add_to(flatbuffers::Offset<flatbuffers::String> to) { fbb_.AddOffset(InviteReq::VT_TO, to); }
  void add_media(int16_t media) { fbb_.AddElement<int16_t>(InviteReq::VT_MEDIA, media, 0); }
  void add_mediainfo(flatbuffers::Offset<flatbuffers::String> mediainfo) { fbb_.AddOffset(InviteReq::VT_MEDIAINFO, mediainfo); }
  void add_suuid(flatbuffers::Offset<flatbuffers::String> suuid) { fbb_.AddOffset(InviteReq::VT_SUUID, suuid); }
  InviteReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InviteReqBuilder &operator=(const InviteReqBuilder &);
  flatbuffers::Offset<InviteReq> Finish() {
    auto o = flatbuffers::Offset<InviteReq>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<InviteReq> CreateInviteReq(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> from = 0,
   flatbuffers::Offset<flatbuffers::String> to = 0,
   int16_t media = 0,
   flatbuffers::Offset<flatbuffers::String> mediainfo = 0,
   flatbuffers::Offset<flatbuffers::String> suuid = 0) {
  InviteReqBuilder builder_(_fbb);
  builder_.add_suuid(suuid);
  builder_.add_mediainfo(mediainfo);
  builder_.add_to(to);
  builder_.add_from(from);
  builder_.add_media(media);
  return builder_.Finish();
}

struct InviteResp FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FROM = 4,
    VT_TO = 6,
    VT_MEDIA = 8,
    VT_MEDIAINFO = 10,
    VT_SUUID = 12,
    VT_MEDIAADDRS = 14
  };
  const flatbuffers::String *from() const { return GetPointer<const flatbuffers::String *>(VT_FROM); }
  const flatbuffers::String *to() const { return GetPointer<const flatbuffers::String *>(VT_TO); }
  int16_t media() const { return GetField<int16_t>(VT_MEDIA, 0); }
  const flatbuffers::String *mediainfo() const { return GetPointer<const flatbuffers::String *>(VT_MEDIAINFO); }
  const flatbuffers::String *suuid() const { return GetPointer<const flatbuffers::String *>(VT_SUUID); }
  const flatbuffers::String *mediaaddrs() const { return GetPointer<const flatbuffers::String *>(VT_MEDIAADDRS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FROM) &&
           verifier.Verify(from()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TO) &&
           verifier.Verify(to()) &&
           VerifyField<int16_t>(verifier, VT_MEDIA) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MEDIAINFO) &&
           verifier.Verify(mediainfo()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SUUID) &&
           verifier.Verify(suuid()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MEDIAADDRS) &&
           verifier.Verify(mediaaddrs()) &&
           verifier.EndTable();
  }
};

struct InviteRespBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_from(flatbuffers::Offset<flatbuffers::String> from) { fbb_.AddOffset(InviteResp::VT_FROM, from); }
  void add_to(flatbuffers::Offset<flatbuffers::String> to) { fbb_.AddOffset(InviteResp::VT_TO, to); }
  void add_media(int16_t media) { fbb_.AddElement<int16_t>(InviteResp::VT_MEDIA, media, 0); }
  void add_mediainfo(flatbuffers::Offset<flatbuffers::String> mediainfo) { fbb_.AddOffset(InviteResp::VT_MEDIAINFO, mediainfo); }
  void add_suuid(flatbuffers::Offset<flatbuffers::String> suuid) { fbb_.AddOffset(InviteResp::VT_SUUID, suuid); }
  void add_mediaaddrs(flatbuffers::Offset<flatbuffers::String> mediaaddrs) { fbb_.AddOffset(InviteResp::VT_MEDIAADDRS, mediaaddrs); }
  InviteRespBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InviteRespBuilder &operator=(const InviteRespBuilder &);
  flatbuffers::Offset<InviteResp> Finish() {
    auto o = flatbuffers::Offset<InviteResp>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<InviteResp> CreateInviteResp(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> from = 0,
   flatbuffers::Offset<flatbuffers::String> to = 0,
   int16_t media = 0,
   flatbuffers::Offset<flatbuffers::String> mediainfo = 0,
   flatbuffers::Offset<flatbuffers::String> suuid = 0,
   flatbuffers::Offset<flatbuffers::String> mediaaddrs = 0) {
  InviteRespBuilder builder_(_fbb);
  builder_.add_mediaaddrs(mediaaddrs);
  builder_.add_suuid(suuid);
  builder_.add_mediainfo(mediainfo);
  builder_.add_to(to);
  builder_.add_from(from);
  builder_.add_media(media);
  return builder_.Finish();
}

}  // namespace MGC

#endif  // FLATBUFFERS_GENERATED_CMD_MGC_H_
